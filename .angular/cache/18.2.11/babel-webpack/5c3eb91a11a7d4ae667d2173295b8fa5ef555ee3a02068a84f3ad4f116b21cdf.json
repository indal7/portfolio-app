{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../toaster.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction RegisterComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\nfunction RegisterComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.successMessage);\n  }\n}\nexport let RegisterComponent = /*#__PURE__*/(() => {\n  class RegisterComponent {\n    constructor(http, router, toasterService) {\n      this.http = http;\n      this.router = router;\n      this.toasterService = toasterService;\n      this.email = '';\n      this.password = '';\n      this.confirmPassword = '';\n      this.errorMessage = '';\n      this.successMessage = '';\n      this.name = '';\n      this.apiUrl = environment.apiUrl;\n    }\n    register() {\n      // Clear previous messages before new validation\n      this.clearMessages();\n      // Validate password match\n      if (this.password !== this.confirmPassword) {\n        this.errorMessage = 'Passwords do not match.';\n        this.toasterService.error(this.errorMessage);\n        return;\n      }\n      // Validate email format\n      const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n      if (!emailPattern.test(this.email)) {\n        this.errorMessage = 'Please enter a valid email address.';\n        return;\n      }\n      // Prepare registration data\n      const registerData = {\n        email: this.email,\n        password: this.password,\n        name: this.name\n      };\n      // Send registration request\n      this.http.post(`${this.apiUrl}/register`, registerData).subscribe(response => {\n        if (response.success) {\n          this.successMessage = 'Registration successful!';\n          this.toasterService.success(this.successMessage);\n          this.router.navigate(['/login']); // Navigate to login page\n        } else {\n          this.errorMessage = response.message || 'Registration failed. Please try again.';\n          this.toasterService.error(this.errorMessage);\n        }\n      }, error => {\n        console.error('Registration error:', error);\n        this.errorMessage = 'Registration failed. Please try again.';\n        this.toasterService.error(this.errorMessage);\n      });\n    }\n    clearMessages() {\n      setTimeout(() => {\n        this.errorMessage = '';\n        this.successMessage = '';\n      }, 5000); // Clear messages after 5 seconds\n    }\n    goToLogin() {\n      this.router.navigate(['/login']);\n    }\n    static #_ = (() => this.ɵfac = function RegisterComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || RegisterComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.ToasterService));\n    })();\n    static #_2 = (() => this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RegisterComponent,\n      selectors: [[\"app-register\"]],\n      decls: 22,\n      vars: 6,\n      consts: [[1, \"register-container\"], [3, \"ngSubmit\"], [\"for\", \"email\"], [\"id\", \"email\", \"name\", \"email\", \"required\", \"\", 3, \"ngModelChange\", \"ngModel\"], [\"for\", \"name\"], [\"id\", \"name\", \"name\", \"name\", \"required\", \"\", 3, \"ngModelChange\", \"ngModel\"], [\"for\", \"password\"], [\"id\", \"password\", \"type\", \"password\", \"name\", \"password\", \"required\", \"\", 3, \"ngModelChange\", \"ngModel\"], [\"for\", \"confirmPassword\"], [\"id\", \"confirmPassword\", \"type\", \"password\", \"name\", \"confirmPassword\", \"required\", \"\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"submit\"], [\"class\", \"error\", 4, \"ngIf\"], [\"class\", \"success\", 4, \"ngIf\"], [\"type\", \"button\", 3, \"click\"], [1, \"error\"], [1, \"success\"]],\n      template: function RegisterComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2, \"Register\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_3_listener() {\n            return ctx.register();\n          });\n          i0.ɵɵelementStart(4, \"label\", 2);\n          i0.ɵɵtext(5, \"Email:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"input\", 3);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function RegisterComponent_Template_input_ngModelChange_6_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.email, $event) || (ctx.email = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"label\", 4);\n          i0.ɵɵtext(8, \"Name:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"input\", 5);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function RegisterComponent_Template_input_ngModelChange_9_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.name, $event) || (ctx.name = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"label\", 6);\n          i0.ɵɵtext(11, \"Password:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"input\", 7);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function RegisterComponent_Template_input_ngModelChange_12_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.password, $event) || (ctx.password = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"label\", 8);\n          i0.ɵɵtext(14, \"Confirm Password:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"input\", 9);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function RegisterComponent_Template_input_ngModelChange_15_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.confirmPassword, $event) || (ctx.confirmPassword = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"button\", 10);\n          i0.ɵɵtext(17, \"Register\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(18, RegisterComponent_div_18_Template, 2, 1, \"div\", 11)(19, RegisterComponent_div_19_Template, 2, 1, \"div\", 12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"button\", 13);\n          i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_20_listener() {\n            return ctx.goToLogin();\n          });\n          i0.ɵɵtext(21, \"Already have an account? Login here\");\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(6);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.email);\n          i0.ɵɵadvance(3);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.name);\n          i0.ɵɵadvance(3);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.password);\n          i0.ɵɵadvance(3);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.confirmPassword);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.successMessage);\n        }\n      },\n      dependencies: [i4.NgIf, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.RequiredValidator, i5.NgModel, i5.NgForm],\n      styles: [\".register-container[_ngcontent-%COMP%]{max-width:500px;margin:auto;padding:20px;background-color:#f9f9f9;border-radius:10px;box-shadow:0 4px 8px #0000001a}h2[_ngcontent-%COMP%]{text-align:center;color:#333;font-size:24px;margin-bottom:20px}form[_ngcontent-%COMP%]{display:flex;flex-direction:column;gap:15px}label[_ngcontent-%COMP%]{font-size:14px;color:#555}input[type=text][_ngcontent-%COMP%], input[type=email][_ngcontent-%COMP%], input[type=password][_ngcontent-%COMP%]{width:100%;padding:10px;border:1px solid #ccc;border-radius:5px;font-size:14px;box-sizing:border-box}button[type=submit][_ngcontent-%COMP%]{background-color:#007bff;color:#fff;padding:10px;border:none;border-radius:5px;cursor:pointer;font-size:16px;transition:background-color .3s ease}button[type=submit][_ngcontent-%COMP%]:hover{background-color:#0056b3}.error[_ngcontent-%COMP%]{color:red;text-align:center;margin-top:10px}.success[_ngcontent-%COMP%]{color:green;text-align:center;margin-top:10px}@media (max-width: 600px){.register-container[_ngcontent-%COMP%]{padding:15px;width:90%}h2[_ngcontent-%COMP%]{font-size:22px}input[type=text][_ngcontent-%COMP%], input[type=email][_ngcontent-%COMP%], input[type=password][_ngcontent-%COMP%], button[type=submit][_ngcontent-%COMP%]{font-size:14px}}.register-container[_ngcontent-%COMP%]   button[type=button][_ngcontent-%COMP%]{margin-top:15px;background:transparent;color:#007bff;border:none;cursor:pointer;text-align:center;font-size:14px}.register-container[_ngcontent-%COMP%]   button[type=button][_ngcontent-%COMP%]:hover{text-decoration:underline}\"]\n    }))();\n  }\n  return RegisterComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}