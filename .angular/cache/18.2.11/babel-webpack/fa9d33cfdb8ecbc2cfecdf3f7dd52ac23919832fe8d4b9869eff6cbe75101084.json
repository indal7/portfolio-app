{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { jwtDecode } from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(router) {\n      this.router = router;\n      this.authStatus = new BehaviorSubject(this.isAuthenticated()); // Initial authentication status\n      this.authStatus$ = this.authStatus.asObservable(); // Observable to subscribe to\n    }\n    // Log in and store the token\n    login(token) {\n      localStorage.setItem('authToken', token);\n      this.authStatus.next(true); // Emit login status\n    }\n    // Log out the user and remove the token\n    logout() {\n      localStorage.removeItem('authToken');\n      this.authStatus.next(false); // Emit logout status\n      this.router.navigate(['/login']);\n    }\n    // Check if the user is logged in\n    isAuthenticated() {\n      const token = localStorage.getItem('authToken');\n      return token != null; // Returns true if token exists\n    }\n    // Get the user's information from the token\n    getUserInfo() {\n      const token = localStorage.getItem('authToken');\n      if (token) {\n        try {\n          return jwtDecode(token);\n        } catch (error) {\n          console.error('Token decoding failed:', error);\n          return null;\n        }\n      }\n      return null; // Return null if no token is found\n    }\n    static #_ = (() => this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.Router));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}