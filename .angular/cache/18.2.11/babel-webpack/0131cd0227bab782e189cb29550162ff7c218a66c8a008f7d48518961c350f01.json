{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../toaster.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction ResetPasswordComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.resetErrorMessage);\n  }\n}\nfunction ResetPasswordComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.resetSuccessMessage);\n  }\n}\nexport let ResetPasswordComponent = /*#__PURE__*/(() => {\n  class ResetPasswordComponent {\n    constructor(http, router, toasterService) {\n      this.http = http;\n      this.router = router;\n      this.toasterService = toasterService;\n      this.newPassword = '';\n      this.confirmNewPassword = '';\n      this.resetErrorMessage = '';\n      this.resetSuccessMessage = '';\n      this.apiUrl = environment.apiUrl;\n      this.resetToken = null; // This should be set from the URL or sent via email\n    }\n    ngOnInit() {\n      // Get the reset token from the URL (if needed)\n      this.resetToken = this.getResetTokenFromUrl();\n    }\n    getResetTokenFromUrl() {\n      // Extract the reset token from the URL, assuming it's a query parameter\n      const urlParams = new URLSearchParams(window.location.search);\n      return urlParams.get('token'); // Adjust as necessary based on your URL structure\n    }\n    resetPassword() {\n      if (this.newPassword !== this.confirmNewPassword) {\n        this.resetErrorMessage = 'Passwords do not match.';\n        return;\n      }\n      const resetData = {\n        newPassword: this.newPassword,\n        token: this.resetToken // Include the reset token if required by your backend\n      };\n      this.http.post(`${this.apiUrl}/reset_password`, resetData).subscribe(response => {\n        if (response.success) {\n          this.resetSuccessMessage = 'Your password has been reset successfully!';\n          this.toasterService.success(this.resetSuccessMessage);\n          this.router.navigate(['/login']); // Redirect to the login page after successful reset\n        } else {\n          this.resetErrorMessage = response.message;\n          this.toasterService.error(this.resetErrorMessage);\n        }\n      }, error => {\n        console.error('Password reset error:', error);\n        this.toasterService.error('Failed to reset password. Please try again.');\n      });\n    }\n    static #_ = (() => this.ɵfac = function ResetPasswordComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.ToasterService));\n    })();\n    static #_2 = (() => this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ResetPasswordComponent,\n      selectors: [[\"app-reset-password\"]],\n      decls: 14,\n      vars: 4,\n      consts: [[1, \"set-new-password-container\"], [3, \"ngSubmit\"], [\"for\", \"newPassword\"], [\"id\", \"newPassword\", \"type\", \"password\", \"name\", \"newPassword\", \"required\", \"\", 3, \"ngModelChange\", \"ngModel\"], [\"for\", \"confirmNewPassword\"], [\"id\", \"confirmNewPassword\", \"type\", \"password\", \"name\", \"confirmNewPassword\", \"required\", \"\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"submit\"], [\"class\", \"error\", 4, \"ngIf\"], [\"class\", \"success\", 4, \"ngIf\"], [1, \"error\"], [1, \"success\"]],\n      template: function ResetPasswordComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h3\");\n          i0.ɵɵtext(2, \"Set New Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function ResetPasswordComponent_Template_form_ngSubmit_3_listener() {\n            return ctx.resetPassword();\n          });\n          i0.ɵɵelementStart(4, \"label\", 2);\n          i0.ɵɵtext(5, \"New Password:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"input\", 3);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function ResetPasswordComponent_Template_input_ngModelChange_6_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.newPassword, $event) || (ctx.newPassword = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"label\", 4);\n          i0.ɵɵtext(8, \"Confirm New Password:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"input\", 5);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function ResetPasswordComponent_Template_input_ngModelChange_9_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.confirmNewPassword, $event) || (ctx.confirmNewPassword = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"button\", 6);\n          i0.ɵɵtext(11, \"Reset Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(12, ResetPasswordComponent_div_12_Template, 2, 1, \"div\", 7)(13, ResetPasswordComponent_div_13_Template, 2, 1, \"div\", 8);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(6);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.newPassword);\n          i0.ɵɵadvance(3);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.confirmNewPassword);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.resetErrorMessage);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.resetSuccessMessage);\n        }\n      },\n      dependencies: [i4.NgIf, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.RequiredValidator, i5.NgModel, i5.NgForm],\n      styles: [\".set-new-password-container[_ngcontent-%COMP%]{max-width:400px;margin:5% auto;padding:20px;border:1px solid #ddd;border-radius:8px;box-shadow:0 4px 8px #0000001a;background-color:#f9f9f9;font-family:Arial,sans-serif}.set-new-password-container[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{text-align:center;color:#333;font-size:24px}.set-new-password-container[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{display:block;margin-bottom:5px;color:#555}.set-new-password-container[_ngcontent-%COMP%]   input[type=password][_ngcontent-%COMP%]{width:100%;padding:10px;margin-bottom:15px;border:1px solid #ccc;border-radius:4px;font-size:16px;box-sizing:border-box}.set-new-password-container[_ngcontent-%COMP%]   input[type=password][_ngcontent-%COMP%]:focus{border-color:#007bff;outline:none;box-shadow:0 0 5px #007bff4d}.set-new-password-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{width:100%;padding:10px;background-color:#007bff;color:#fff;border:none;border-radius:4px;font-size:16px;cursor:pointer;transition:background-color .3s ease}.set-new-password-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover{background-color:#0056b3}.set-new-password-container[_ngcontent-%COMP%]   .success[_ngcontent-%COMP%]{color:#28a745;font-size:14px;margin-top:10px;text-align:center}.set-new-password-container[_ngcontent-%COMP%]   .error[_ngcontent-%COMP%]{color:#d9534f;font-size:14px;margin-top:10px;text-align:center}\"]\n    }))();\n  }\n  return ResetPasswordComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}