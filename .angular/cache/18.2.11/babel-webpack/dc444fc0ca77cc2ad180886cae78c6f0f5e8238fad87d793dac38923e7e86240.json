{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { jwtDecode } from 'jwt-decode';\nlet ProfileComponent = class ProfileComponent {\n  constructor(authService, toasterService) {\n    this.authService = authService;\n    this.toasterService = toasterService;\n    this.userProfile = {\n      username: '',\n      email: '',\n      bio: '',\n      profile_photo: '',\n      contactInfo: [{\n        type: 'email',\n        value: ''\n      }],\n      skills: '',\n      projectTags: [],\n      media: [],\n      resume: '',\n      selectedProfilePicture: null,\n      selectedResume: null\n    };\n    this.updateMessage = '';\n    this.editMode = false;\n    this.isLoading = true;\n    this.errorFetchingData = false;\n    this.contactValue = '';\n    this.contactType = '';\n    this.newTag = '';\n  }\n  ngOnInit() {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      const decoded = jwtDecode(token);\n      this.userProfile.email = decoded.email;\n      this.getUserProfile(this.userProfile.email);\n    }\n  }\n  getUserProfile(email) {\n    this.authService.getUserProfile(email).subscribe(response => {\n      this.isLoading = false;\n      if (response.success && response.data) {\n        this.userProfile = {\n          ...response.data,\n          selectedProfilePicture: null,\n          selectedResume: null\n        };\n        this.errorFetchingData = false;\n      } else {\n        this.handleProfileFetchError(response.message);\n      }\n    }, error => {\n      this.isLoading = false;\n      this.handleProfileFetchError(error.message);\n    });\n  }\n  handleProfileFetchError(message) {\n    this.errorFetchingData = true;\n    const errorMessage = message || 'Failed to fetch user profile. Creating a new profile...';\n    this.toasterService.error(errorMessage);\n    this.createProfile();\n  }\n  updateProfile() {\n    const formData = this.buildFormData();\n    this.authService.updateUserProfile(formData).subscribe(response => {\n      if (response.success) {\n        this.toasterService.success('Profile updated successfully!');\n        this.editMode = false;\n        this.getUserProfile(this.userProfile.email);\n      } else {\n        this.toasterService.error('Failed to update profile. ' + response.message);\n      }\n    }, error => {\n      this.toasterService.error('Failed to update profile. ' + error.message);\n    });\n  }\n  createProfile() {\n    this.updateProfile();\n  }\n  buildFormData() {\n    const formData = new FormData();\n    for (const key in this.userProfile) {\n      if (key !== 'selectedProfilePicture' && key !== 'selectedResume') {\n        const value = this.userProfile[key];\n        formData.append(key, Array.isArray(value) ? JSON.stringify(value) : value);\n      }\n    }\n    if (this.userProfile.selectedProfilePicture) {\n      formData.append('profilePicture', this.userProfile.selectedProfilePicture);\n    }\n    if (this.userProfile.selectedResume) {\n      formData.append('resume', this.userProfile.selectedResume);\n    }\n    return formData;\n  }\n  onProfilePictureChange(event) {\n    const target = event.target;\n    if (target.files && target.files.length) {\n      const file = target.files[0];\n      if (file.type.startsWith('image/') && file.size <= 5 * 1024 * 1024) {\n        this.userProfile.selectedProfilePicture = file;\n      } else {\n        this.toasterService.error('Only image files under 5MB are allowed.');\n      }\n    }\n  }\n  onResumeChange(event) {\n    const target = event.target;\n    if (target.files && target.files.length) {\n      const file = target.files[0];\n      if (['application/pdf', 'application/msword'].includes(file.type) && file.size <= 10 * 1024 * 1024) {\n        this.userProfile.selectedResume = file;\n      } else {\n        this.toasterService.error('Only PDF or Word files under 10MB are allowed.');\n      }\n    }\n  }\n  toggleEditMode() {\n    this.editMode = !this.editMode;\n  }\n  addContactInfo() {\n    this.userProfile.contactInfo.push({\n      type: 'email',\n      value: ''\n    });\n  }\n  removeContactInfo(index) {\n    this.userProfile.contactInfo.splice(index, 1);\n  }\n  addTag(event) {\n    if (event.key === 'Enter' && this.newTag.trim()) {\n      if (!this.userProfile.projectTags.includes(this.newTag.trim())) {\n        this.userProfile.projectTags.push(this.newTag.trim());\n      }\n      this.newTag = '';\n    }\n  }\n  removeTag(index) {\n    this.userProfile.projectTags.splice(index, 1);\n  }\n  triggerFileInput() {\n    this.fileInput.nativeElement.click();\n  }\n};\n__decorate([ViewChild('fileInput')], ProfileComponent.prototype, \"fileInput\", void 0);\nProfileComponent = __decorate([Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})], ProfileComponent);\nexport { ProfileComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}