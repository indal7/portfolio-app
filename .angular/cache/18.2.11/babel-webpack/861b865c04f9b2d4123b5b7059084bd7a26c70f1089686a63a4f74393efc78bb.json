{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { environment } from 'src/environments/environment'; // Import environment\nimport { tap } from 'rxjs/operators'; // Import tap operator for observable\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.authStatusSubject = new BehaviorSubject(false); // Tracks auth state\n      this.authStatus$ = this.authStatusSubject.asObservable();\n      this.apiUrl = environment.apiUrl; // API URL from environment\n      this.checkTokenOnLoad();\n    }\n    // Check token presence on service initialization\n    checkTokenOnLoad() {\n      const token = localStorage.getItem('authToken');\n      this.authStatusSubject.next(!!token); // Update status based on token presence\n    }\n    // Method to log in the user and set token\n    login(credentials) {\n      return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n        if (response.success) {\n          this.setToken(response.token); // Store the token and update auth status\n        }\n      }));\n    }\n    // Store the token and update authentication status\n    setToken(token) {\n      console.log('Logging in with token:', token); // Logging token during login\n      localStorage.setItem('authToken', token);\n      this.authStatusSubject.next(true); // Set auth status to true on login\n    }\n    // Method to log out the user\n    logout() {\n      console.log('Logging out'); // Logging during logout\n      localStorage.removeItem('authToken');\n      this.authStatusSubject.next(false); // Set auth status to false on logout\n    }\n    // Method to check if the user is logged in\n    isLoggedIn() {\n      return !!localStorage.getItem('authToken');\n    }\n    // Method to request password reset\n    requestPasswordReset(emailData) {\n      // Make sure this method expects an object with an email property\n      return this.http.post(`${this.apiUrl}/password-reset`, emailData);\n    }\n    static #_ = (() => this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}