{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"../toaster.service\";\nimport * as i3 from \"@angular/common\";\nfunction ProfileComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"img\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"src\", ctx_r0.imageUrl, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction ProfileComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"No profile picture available.\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let ProfileComponent = /*#__PURE__*/(() => {\n  class ProfileComponent {\n    constructor(authService, toasterService) {\n      this.authService = authService;\n      this.toasterService = toasterService;\n      this.user = {\n        username: '',\n        email: '',\n        bio: '',\n        profilePhoto: '',\n        contactInfo: '',\n        skills: '',\n        projectTags: [],\n        media: [],\n        resume: ''\n      };\n      this.newTag = '';\n      this.mediaUrl = '';\n      this.updateMessage = '';\n      this.selectedProfilePicture = null;\n      this.selectedResume = null;\n      this.isProfileComplete = false;\n      this.imageServiceUrl = 'https://user-profiles-details.s3.ap-southeast-1.amazonaws.com/indalsaroj404%40gmail.com/profile_photo.jpeg';\n    }\n    ngOnInit() {\n      this.getUserProfile();\n      this.imageUrl = this.imageServiceUrl; // Set the direct URL here\n    }\n    getUserProfile() {\n      this.authService.getUserProfile().subscribe(response => {\n        if (response.success) {\n          this.user = {\n            ...response.data\n          };\n          this.isProfileComplete = true;\n        } else {\n          this.toasterService.error('Failed to fetch user profile.');\n        }\n      }, error => {\n        console.error('Error fetching profile:', error);\n        this.toasterService.error('Failed to fetch user profile. Please try again.');\n      });\n    }\n    onProfilePictureChange(event) {\n      const input = event.target;\n      if (input.files && input.files.length > 0) {\n        this.selectedProfilePicture = input.files[0];\n        const reader = new FileReader();\n        reader.onload = () => {\n          this.user.profilePhoto = reader.result;\n        };\n        reader.readAsDataURL(this.selectedProfilePicture);\n      }\n    }\n    onResumeChange(event) {\n      const input = event.target;\n      if (input.files && input.files.length > 0) {\n        this.selectedResume = input.files[0];\n      }\n    }\n    addTag(event) {\n      if (event.key === 'Enter' && this.newTag) {\n        this.user.projectTags.push(this.newTag);\n        this.newTag = '';\n      }\n    }\n    removeTag(tag) {\n      this.user.projectTags = this.user.projectTags.filter(t => t !== tag);\n    }\n    addMedia() {\n      if (this.mediaUrl) {\n        this.user.media.push(this.mediaUrl);\n        this.mediaUrl = '';\n      }\n    }\n    navigateToProjects() {\n      // Implement navigation logic to projects\n    }\n    updateProfile() {\n      const formData = new FormData();\n      formData.append('username', this.user.username);\n      formData.append('email', this.user.email);\n      formData.append('bio', this.user.bio);\n      if (this.selectedProfilePicture) {\n        formData.append('profilePhoto', this.selectedProfilePicture);\n      }\n      formData.append('contactInfo', this.user.contactInfo);\n      formData.append('skills', this.user.skills);\n      formData.append('projectTags', JSON.stringify(this.user.projectTags));\n      formData.append('media', JSON.stringify(this.user.media));\n      if (this.selectedResume) {\n        formData.append('resume', this.selectedResume);\n      }\n      this.authService.updateUserProfile(formData).subscribe(response => {\n        if (response.success) {\n          this.updateMessage = 'Profile updated successfully!';\n          this.toasterService.success(this.updateMessage);\n        } else {\n          this.updateMessage = 'Failed to update profile.';\n          this.toasterService.error(this.updateMessage);\n        }\n      }, error => {\n        console.error('Error updating profile:', error);\n        this.toasterService.error('Failed to update profile. Please try again.');\n      });\n    }\n    fetchImage() {\n      fetch(this.imageServiceUrl).then(response => {\n        if (!response.ok) {\n          throw new Error('Image not found');\n        }\n        return response.blob();\n      }).then(blob => {\n        this.imageUrl = window.URL.createObjectURL(blob);\n      }).catch(error => {\n        console.error('Error fetching image:', error);\n        this.toasterService.error('Could not load profile image');\n      });\n    }\n    downloadImage() {\n      fetch(this.imageServiceUrl).then(response => {\n        if (!response.ok) {\n          throw new Error('Image not found');\n        }\n        return response.blob();\n      }).then(blob => {\n        const blobUrl = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = blobUrl;\n        a.download = 'profile_picture.jpg'; // Set the download file name\n        document.body.appendChild(a); // Append the anchor to the document body\n        a.click(); // Programmatically trigger the download\n        document.body.removeChild(a); // Remove the anchor after download\n        window.URL.revokeObjectURL(blobUrl); // Release the URL object\n      }).catch(error => {\n        console.error('Error downloading image:', error);\n        this.toasterService.error('Failed to download profile picture');\n      });\n    }\n    static #_ = (() => this.ɵfac = function ProfileComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ProfileComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.ToasterService));\n    })();\n    static #_2 = (() => this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ProfileComponent,\n      selectors: [[\"app-profile\"]],\n      decls: 3,\n      vars: 2,\n      consts: [[\"noImage\", \"\"], [4, \"ngIf\", \"ngIfElse\"], [\"alt\", \"Profile Picture\", 1, \"profile-picture\", 3, \"src\"]],\n      template: function ProfileComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, ProfileComponent_div_0_Template, 2, 1, \"div\", 1)(1, ProfileComponent_ng_template_1_Template, 2, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n        }\n        if (rf & 2) {\n          const noImage_r2 = i0.ɵɵreference(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.imageUrl)(\"ngIfElse\", noImage_r2);\n        }\n      },\n      dependencies: [i3.NgIf],\n      styles: [\"body[_ngcontent-%COMP%]{font-family:Arial,sans-serif;background-color:#f4f4f4;margin:0;padding:0}.profile-container[_ngcontent-%COMP%]{max-width:600px;margin:50px auto;padding:20px;background:#fff;border-radius:8px;box-shadow:0 2px 10px #0000001a}h2[_ngcontent-%COMP%]{text-align:center;color:#333}form[_ngcontent-%COMP%]{display:flex;flex-direction:column}label[_ngcontent-%COMP%]{margin-top:15px;font-weight:700;color:#555}input[type=text][_ngcontent-%COMP%], input[type=email][_ngcontent-%COMP%], input[type=file][_ngcontent-%COMP%], textarea[_ngcontent-%COMP%]{padding:10px;border:1px solid #ccc;border-radius:5px;margin-top:5px;font-size:16px;transition:border-color .3s}input[type=text][_ngcontent-%COMP%]:focus, input[type=email][_ngcontent-%COMP%]:focus, textarea[_ngcontent-%COMP%]:focus{border-color:#5b9bd5;outline:none}.tags-container[_ngcontent-%COMP%], .media-container[_ngcontent-%COMP%]{display:flex;flex-wrap:wrap;margin-top:10px}.tag[_ngcontent-%COMP%]{background-color:#e1f5fe;border:1px solid #90caf9;border-radius:3px;padding:5px 10px;margin:5px;display:flex;align-items:center}.tag[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{margin-left:8px;background-color:transparent;border:none;color:#e57373;cursor:pointer}.tag[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover{color:#c62828}.media-item[_ngcontent-%COMP%]{background-color:#f0f4c3;border:1px solid #dce775;border-radius:3px;padding:5px 10px;margin:5px}button[type=submit][_ngcontent-%COMP%]{margin-top:20px;padding:10px;background-color:#5b9bd5;color:#fff;border:none;border-radius:5px;cursor:pointer;transition:background-color .3s;font-size:16px}button[type=submit][_ngcontent-%COMP%]:hover{background-color:#4a90e2}.message[_ngcontent-%COMP%]{margin-top:20px;padding:10px;border:1px solid #b3e5fc;border-radius:5px;background-color:#e1f5fe;color:#0d47a1;text-align:center}@media (max-width: 600px){.profile-container[_ngcontent-%COMP%]{padding:15px}input[type=text][_ngcontent-%COMP%], input[type=email][_ngcontent-%COMP%], textarea[_ngcontent-%COMP%], button[type=submit][_ngcontent-%COMP%]{font-size:14px}}\"]\n    }))();\n  }\n  return ProfileComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}