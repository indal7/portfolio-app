{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport jwtDecode from 'jwt-decode';\nlet ProfileComponent = class ProfileComponent {\n  constructor(authService, toasterService) {\n    this.authService = authService;\n    this.toasterService = toasterService;\n    this.user = {\n      username: '',\n      email: '',\n      bio: '',\n      profilePhoto: '',\n      contactInfo: '',\n      skills: '',\n      projectTags: [],\n      media: [],\n      resume: ''\n    };\n    this.newTag = '';\n    this.mediaUrl = '';\n    this.updateMessage = '';\n    this.selectedProfilePicture = null;\n    this.selectedResume = null;\n    this.editMode = false;\n    this.errorFetchingData = false; // Error tracking\n    this.isLoading = true; // Loading state\n  }\n  ngOnInit() {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      const decoded = jwtDecode(token);\n      this.userName = decoded.name;\n      this.userEmail = decoded.email;\n      this.getUserProfile(this.userEmail);\n    }\n  }\n  getUserProfile(email) {\n    this.authService.getUserProfile(email).subscribe(response => {\n      this.isLoading = false; // Set loading to false when response is received\n      if (response.success && response.data) {\n        this.user = {\n          ...response.data\n        };\n        this.imageUrl = this.user.profilePhoto;\n        this.errorFetchingData = false; // Reset error state on success\n      } else {\n        this.toasterService.error('User profile not found. Creating a new profile...');\n        this.createProfile();\n      }\n    }, error => {\n      this.isLoading = false; // Set loading to false when error occurs\n      this.errorFetchingData = true; // Set error state to true on failure\n      this.toasterService.error('Failed to fetch user profile. Creating a new profile...');\n      this.createProfile();\n    });\n  }\n  toggleEditMode() {\n    this.editMode = !this.editMode;\n  }\n  updateProfile() {\n    // Update profile logic\n    this.authService.updateUserProfile(this.user).subscribe(response => {\n      if (response.success) {\n        this.toasterService.success('Profile updated successfully!');\n        this.editMode = false;\n      } else {\n        this.toasterService.error('Failed to update profile.');\n      }\n    }, error => {\n      this.toasterService.error('Failed to update profile.');\n    });\n  }\n  createProfile() {\n    // Create profile logic\n    this.authService.createUserProfile(this.user).subscribe(response => {\n      if (response.success) {\n        this.toasterService.success('Profile created successfully!');\n      } else {\n        this.toasterService.error('Failed to create profile.');\n      }\n    }, error => {\n      this.toasterService.error('Failed to create profile.');\n    });\n  }\n  addTag(event) {\n    if (event.key === 'Enter' && this.newTag) {\n      this.user.projectTags.push(this.newTag);\n      this.newTag = '';\n    }\n  }\n  removeTag(tag) {\n    this.user.projectTags = this.user.projectTags.filter(t => t !== tag);\n  }\n  addMedia() {\n    if (this.mediaUrl) {\n      this.user.media.push(this.mediaUrl);\n      this.mediaUrl = '';\n    }\n  }\n  onProfilePictureChange(event) {\n    const target = event.target;\n    if (target.files && target.files.length) {\n      this.selectedProfilePicture = target.files[0];\n      // Handle profile picture upload\n    }\n  }\n  onResumeChange(event) {\n    const target = event.target;\n    if (target.files && target.files.length) {\n      this.selectedResume = target.files[0];\n      // Handle resume upload\n    }\n  }\n};\nProfileComponent = __decorate([Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})], ProfileComponent);\nexport { ProfileComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}